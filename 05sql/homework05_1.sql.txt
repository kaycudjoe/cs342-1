-- Exercise 9.11 — Implement the schema by hand for this exercise, based on the
-- model from the previous question. No automatic schema generation is 
-- required.
-- 
-- Theodore Bigelow
-- CS 342 Spring 2017
-- 03/10/17
--
-- SQL file for homework 5 as per the assignment at 
-- https://cs.calvin.edu/courses/cs/342/kvlinden/05sql/homework.html

-- Write SQL queries that:
-- Get a list of the employees who have finished all of their jobs (i.e., all their jobs in the job_history table have non-null end_dates).
SELECT E.employee_id || ' ' || E.first_name || ' ' || E.last_name AS Employee
FROM Employee E, Job_History JH
WHERE E.employee_id = JH.employee_id
AND JH.end_date IS NOT NULL;
		
-- Get a list of employees along with their manager such that the managers have less seniority at the company and that all the employees’ jobs have been within the manager’s department.

SELECT E.first_name || ' ' || E.last_name AS Employee_Name, M.first_name || ' ' || M.last_name AS Manager_Name
FROM Employees E, Employees M
WHERE E.manager_id = M.employee_id
AND E.hire_date < M.hire_date
AND NOT EXISTS (SELECT JH.job_id
				FROM Job_History JH
				WHERE JH.department_id != M.department_id
				AND E.employee_id = JH.employee_id);

-- The countries in which at least one department is located. Try to write this as both a join and a nested query. If you can, explain which is better. If you can’t, explain which is not possible and why.
-- Join:
SELECT DISTINCT C.country_name 
FROM COUNTRIES C, LOCATIONS L, DEPARTMENTS D
WHERE C.country_id = L.country_id 
AND L.location_id = D.location_id;

-- Nested Query:
SELECT C.country_name 
FROM Countries C, Locations L
WHERE C.country_id IN(SELECT DISTINCT C.country_id
					FROM Locations L, Departments D
					WHERE L.location_id = D.location_id);
	
-- A join query is faster as it does not need to perform the nested subquery for every country_id in C.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	