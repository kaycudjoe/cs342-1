Originally a loop of 10000 of this query took .74 seconds:

SELECT DISTINCT R.building
FROM Room R
WHERE NOT EXISTS(
	SELECT roomID
	FROM Event E
	WHERE TRUNC(E.eventDate) = TRUNC(sysdate)
	AND E.roomID = R.id
);

With a plan of 
-------------------------------------
| Id  | Operation           | Name  |
-------------------------------------
|   0 | SELECT STATEMENT    |       |
|   1 |  HASH UNIQUE        |       |
|   2 |   HASH JOIN ANTI    |       |
|   3 |    TABLE ACCESS FULL| ROOM  |
|   4 |    TABLE ACCESS FULL| EVENT |
-------------------------------------

The plan demonstrates that the query performs a full table access on Room and Event, which I have required in my statement, joins them, tests for uniqueness, and then selects.  This is exactly what the query specifies.

Adding indices like so...

CREATE INDEX RIndex ON Room (id, building);
CREATE INDEX EIndex ON Event (roomID, eventDate);

...resulted in the following execution plan:
------------------------------------
| Id  | Operation         | Name   |
------------------------------------
|   0 | SELECT STATEMENT  |        |
|   1 |  HASH UNIQUE      |        |
|   2 |   HASH JOIN ANTI  |        |
|   3 |    INDEX FULL SCAN| RINDEX |
|   4 |    INDEX FULL SCAN| EINDEX |
------------------------------------

which resulted in a reduction to .67 seconds for 10000 repetitions.

Since the query only uses two columns of both Room and Event, creating indices allows the execution to only go over the full table once when creating the index, using a much smaller index whenever the query only uses the columns that are in one of the indices.
There isn't much room to play around with the ordering of the query and still fulfill the requirements of project 3, but I discovered that DISTINCT is more efficient than UNIQUE, each 10000 queries using SELECT DISTINCT were .01 seconds faster than the same amount of SELECT UNIQUE queries.

The resulting more efficient query is:

CREATE INDEX RIndex ON Room (id, building);
CREATE INDEX EIndex ON Event (roomID, eventDate);

SELECT DISTINCT R.building
FROM Room R
WHERE NOT EXISTS(
	SELECT roomID
	FROM Event E
	WHERE TRUNC(E.eventDate) = TRUNC(sysdate)
	AND E.roomID = R.id
);

DROP INDEX RIndex;
DROP INDEX EIndex;